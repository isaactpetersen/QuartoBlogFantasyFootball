---
title: "Quarto Instructions"
author: "Insert Author's Name Here"
date: "7/9/2024"
categories: [instructions, code, analysis, fantasy football]
image: "quarto-logo.png"
lightbox: true
---

# Preamble {#sec-preamble}

## Load Libraries {#sec-loadLibraries}

```{{r}}
#| message: false
#| warning: false

library("petersenlab") #located here: https://github.com/DevPsyLab/petersenlab
```

The resulting output (in the document) looks like this:

```{r}
#| message: false
#| warning: false

library("petersenlab") #located here: https://github.com/DevPsyLab/petersenlab
```

# Intro {#sec-intro}

This document provides instructions for your blog posts.
This document is a [`Quarto`](https://quarto.org) document, which is an example of a computational notebook.
[`Quarto`](https://quarto.org) enables you to weave together content and executable code into a finished document.
In a [`Quarto`](https://quarto.org) document, the results appear beneath the code.
This allows you to share your data, statistical code, results, graphics, and text interpreting the analyses all in-line.
Sharing data and your analysis code with others helps ensure reproducibility—i.e., that others get the exact same results as you.
For more information on the value of computational notebooks, see the article titled "[The Scientific Paper Is Obsolete](https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/)".
To learn more about [`Quarto`](https://quarto.org) see <https://quarto.org>.

The [`Quarto` website](https://quarto.org/docs/computations/r.html) provides documentation on using `R` within a [`Quarto`](https://quarto.org) document: <https://quarto.org/docs/computations/r.html>.
[`Quarto`](https://quarto.org) is based on [`Markdown`](https://quarto.org/docs/authoring/markdown-basics.html) syntax.
For more info on the basics of [`Markdown`](https://quarto.org/docs/authoring/markdown-basics.html), see here: <https://quarto.org/docs/authoring/markdown-basics.html>.

# Steps to Post your Blog Article {#sec-postBlogArticle}

To post your blog article, follow the following steps:

1. Follow the steps at the following link to create your `GitHub` repository using the `QuartoBlogFantasyFootball` template: <https://isaactpetersen.github.io/Fantasy-Football-Analytics-Textbook/getting-started.html#sec-initialSetup>.
1. Create a new folder for the article under the `posts` folder of your repository.
I recommend naming the folder after either: a) the date (e.g., `2025-09-30`), b) the name of the assignment (e.g., `Blog Article 1`), or c) a brief title for the article (`Welcome to My Blog`).
1. Make a copy of the [`index.qmd` file](https://github.com/isaactpetersen/QuartoBlogFantasyFootball/blob/main/posts/template/index.qmd) from the [`template` folder](https://github.com/isaactpetersen/QuartoBlogFantasyFootball/tree/main/posts/template) and paste it into the new folder you created for your post (do not delete the original file).
1. Write your article by filling in the contents of the new `index.qmd` you created.
In the same folder, add any images you want to include in your post.
Make sure you add—to the `data` folder—whatever data files you need for your post.
In writing the article, I strongly encourage you to consult the [example post](https://isaactpetersen.github.io/QuartoBlogFantasyFootball/posts/example/) (and the [associated `.qmd` file](https://github.com/isaactpetersen/QuartoBlogFantasyFootball/blob/main/posts/example/index.qmd) that generated it) and the [template post](https://isaactpetersen.github.io/QuartoBlogFantasyFootball/posts/template/) (and the [associated `.qmd` file](https://github.com/isaactpetersen/QuartoBlogFantasyFootball/blob/main/posts/template/index.qmd) that generated it) to ensure you include the necessary information and follow the required structure.
1. After writing the article, preview it to make sure it looks the way you want it to look by rendering it locally.
To render the article on your local computer, with the `index.qmd` file open, click the "Render" button in the top left of `RStudio` (see image below).
![Rendering Your Post in RStudio](render.png){.lightbox}
1. After you get the post the way you want it to look locally, create a commit in `GitHub` with your changes and push them to your `GitHub` repository.
1. Go the the "Actions" tab of your `GitHub` repository to track the status as your blog and post(s) compile.
This will take a while the first time to compile on `GitHub`, because it needs to install all of the necessary packages.
If it compiles successfully, your blog should be viewable at the following link:
`https://YOUR_GITHUB_USERNAME.github.io/NAME_OF_YOUR_REPOSITORY/`.
For instance, my example blog is located at the following location: <https://isaactpetersen.github.io/QuartoBlogFantasyFootball/>.
1. If there are any errors during compilation, fix them.
If there are no errors, check the post online to see if it appears as expected.
If it does not appear as expected, make the additional changes you want, and create another commit in `GitHub` with your changes and push them until it appears the way you expect.

# Instructions for Working with `Quarto` {#sec-quartoInstructions}

- **Use a new line for every sentence.** 
This helps with version control—individually changed sentences will be highlighted upon commits (which are easy to parse to identify the specific changes) rather than whole paragraphs (which are a nightmare to parse to identify the specific changes).
`Quarto` will automatically put a space where a new line begins.
To start a new paragraph, put a blank line in between the paragraphs.
- Wrap `R` code in a "code block", with three backticks (`` ``` ``) at the beginning and end of the block, and designating the code language as `R` using `{r}`, as below:
```{{r}}
# insert R code here (without the pound sign)
```
- Add linked content (e.g., images, data) to the sub-directories of the relevant post; do not add a file that is more than 50 mb to the repo.
Data files on `GitHub` can be no larger than 50 mb.
If you want to use a data file that is larger than 50 mb, either subset the data to the relevant rows/columns you need and save it as a new data file that is less than 50 mb, or [download the data from the internet](https://isaactpetersen.github.io/Fantasy-Football-Analytics-Textbook/download-football-data.html) as part of the `R` code in the [`Quarto`](https://quarto.org) script so that the data file does not need to be saved in the repo.
For example, here is an example of `R` code to download data:
```{{r}}
#| eval: false

nfl_pbp_raw <- nflreadr::load_pbp(seasons = TRUE)
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

nfl_pbp_raw <- nflreadr::load_pbp(seasons = TRUE)
```
- Use no spaces in file or folder names.
Use a dash (-) instead of a space.
- When making numbered (ordered) lists, just use `1. ` for all numbers.
[`Quarto`](https://quarto.org) will make them sequential automatically.
This makes it easier to add/reorder items, so you do not have to renumber manually each time there is a change.
- To update the list of `R` packages that are installed for running the blog post (`.qmd`) files, update the `DESCRIPTION` file.
- Before posting the article to the blog, make sure the article renders correctly locally by clicking the "Render" button in RStudio.

# Submitting Blog Articles {#sec-submitBlogArticles}

See the syllabus for instructions regarding submitting your blog article.
As noted in the syllabus, <u>**you are encouraged to submit your blog article well before the deadline**</u>.
You can expect to run into technical issues (e.g., errors when running your code, issues getting the blog post to compile, etc.).
And, it can take a long time for the blog to compile the first time, because it needs to install all of the necessary packages (it can also take a while for subsequent runs for which new versions of the packages are available and the packages need to be updated).
Thus, you should give yourself plenty of time to troubleshoot so that you can submit your blog article on time.
If you leave it for the last day, it is unlikely that you will be able to submit your blog article on time!
See the syllabus for suggestions on how to troubleshoot when issues arise.

# Data Files {#sec-dataFiles}

If you want to save a data file in the `GitHub` repository to be loaded and used in a post, you can save the data file in the same folder as the post.
Or, if you want to use the same data file in multiple posts, you can save the data files in the "data" folder that is in the root of the repository.

To load a data file in the same folder as the post, use the following `R` code (in a code block):

```{{r}}
#| eval: false

load("DATA_FILENAME.RData")
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

load("DATA_FILENAME.RData")
```

To load a data file in the root "data" folder, use the following `R` code (in a code block):

```{{r}}
#| eval: false

load("../../data/DATA_FILENAME.RData")
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

load("../../data/DATA_FILENAME.RData")
```

# Level-1 Heading {#sec-level1Heading}

Create a level-1 heading using the following syntax:

```
# Level-1 Heading {#sec-level1Heading}
```

## Level-2 Heading {#sec-level2Heading}

Create a level-2 heading using the following syntax:

```
## Level-2 Heading {#sec-level2Heading}
```

### Level-3 Heading {#sec-level3Heading}

Create a level-3 heading using the following syntax:

```
### Level-3 Heading {#sec-level3Heading}
```

#### Level-4 Heading {#sec-level4Heading}

Create a level-4 heading using the following syntax:

```
#### Level-4 Heading {#sec-level4Heading}
```

# Adding Code Options {#sec-addCodeOptions}

You can add options to executable code like this:

```{{r}}
#| echo: false

2 * 2
```

The resulting output (in the document) looks like this:

```{r}
#| echo: false

2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
Below is a code block that specifies `eval: false`, which allows providing code without executing the code:

```{{r}}
#| eval: false

2 * 2
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

2 * 2
```

Below is a code block that specifies `message: false` and `warning: false` to suppress messages and warnings:

```{{r}}
#| message: false
#| warning: false

library("petersenlab") #located here: https://github.com/DevPsyLab/petersenlab
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

library("petersenlab") #located here: https://github.com/DevPsyLab/petersenlab
```

# Plot {#sec-plot}

```{{r}}
plot(cars)
```

The resulting output (in the document) looks like this:

```{r}
plot(cars)
```

# Image {#sec-image}

To include an image, use the following syntax:

```
![](quarto-logo.png)
```

The resulting output (in the document) looks like this:

![](quarto-logo.png)

For more info on using images in [`Quarto`](https://quarto.org), see here: <https://quarto.org/docs/authoring/figures.html>.

# Table {sec-table}

Here is an example table (that specifies justification of each column using the location of the colon):

| Default | Left | Right | Center |
|---------|:-----|------:|:------:|
| 12      | 12   |    12 |   12   |
| 123     | 123  |   123 |  123   |
| 1       | 1    |     1 |   1    |

: Table caption

For more info on using tables in [`Quarto`](https://quarto.org), see here: <https://quarto.org/docs/authoring/tables.html>.

# Unordered Lists {#sec-unorderedLists}

To create unordered (bulleted) lists, use the following syntax:

```
- one item
- one item
- one item
    - one more item
    - one more item
    - one more item
```

The resulting output (in the document) looks like this:

- one item
- one item
- one item
    - one more item
    - one more item
    - one more item

# Ordered Lists {#sec-orderedLists}

To create ordered (numbered) lists, use the following syntax (make sure to use `1` for all numbers):

```
1. the first item
1. the second item
1. the third item
    - one unordered item
    - one unordered item
```

The resulting output (in the document) looks like this (note how the `1`s were automatically renumbered correctly):

1. the first item
1. the second item
1. the third item
    - one unordered item
    - one unordered item

# Troubleshooting {#sec-troubleshooting}

If you run into questions/issues/warnings/errors and need to troubleshoot, see the syllabus for suggestions on how to troubleshoot when issues arise.

Below are sections for common questions/issues/warnings/errors in [`R`](#sec-troubleshootingR), [`GitHub`](#sec-troubleshootingGitHub), and [`GitHub Pages`](#sec-troubleshootingGitHubPages) (that I will populate as I receive questions), and how to info on how to address them.

## `R` {#sec-troubleshootingR}

## `GitHub` {#sec-troubleshootingGitHub}

## `GitHub Pages` {#sec-troubleshootingGitHubPages}

# Session Info {#sec-sessionInfo}

```{r}
sessionInfo()
```