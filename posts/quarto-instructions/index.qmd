---
title: "Quarto Instructions"
author: "Insert Author's Name Here"
date: "7/9/2024"
categories: [instructions, code, analysis, fantasy football]
image: "quarto-logo.png"
---

# Preamble {#sec-preamble}

## Load Libraries {#sec-loadLibraries}

```{{r}}
#| message: false
#| warning: false

library("petersenlab") #located here: https://github.com/DevPsyLab/petersenlab
```

The resulting output (in the document) looks like this:

```{r}
#| message: false
#| warning: false

library("petersenlab") #located here: https://github.com/DevPsyLab/petersenlab
```

# Intro {#sec-intro}

This document provides instructions for your blog posts.
This document is a [Quarto](https://quarto.org) document, which is an example of a computational notebook.
[Quarto](https://quarto.org) enables you to weave together content and executable code into a finished document.
In a [Quarto](https://quarto.org) document, the results appear beneath the code.
This allows you to share your data, statistical code, results, graphics, and text interpreting the analyses all in-line.
Sharing data and your analysis code with others helps ensure reproducibility—i.e., that others get the exact same results as you.
For more information on the value of computational notebooks, see the article titled "[The Scientific Paper Is Obsolete](https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/)".
To learn more about [Quarto](https://quarto.org) see <https://quarto.org>.

# Instructions for Working with Quarto {#sec-quartoInstructions}

- **Use a new line for every sentence.** 
This helps with version control—individually changed sentences will be highlighted upon commits (which are easy to parse to identify the specific changes) rather than whole paragraphs (which are a nightmare to parse to identify the specific changes).
- Wrap `R` code in a "code chunk", with three backticks (`` `\`\`\` ` ``) at the beginning and end of the chunk, and designating the code language as `R` using `{r}`, as below:
```{{r}}
# insert R code here (without the pound sign)
```
- Add linked content (e.g., images, data) to the sub-directories of the relevant post; do not add a file that is more than 50 mb to the repo.
Data files on GitHub can be no larger than 50 mb.
If you want to use a data file that is larger than 50 mb, either subset the data to the relevant rows/columns you need and save it as a new data file that is less than 50 mb, or [download the data from the internet](https://isaactpetersen.github.io/Fantasy-Football-Analytics-Textbook/download-football-data.html) as part of the `R` code in the Quarto script so that the data file does not need to be saved in the repo.
For example, here is an example of `R` code to download data:
```{{r}}
#| eval: false

nfl_pbp_raw <- nflreadr::load_pbp(seasons = TRUE)
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

nfl_pbp_raw <- nflreadr::load_pbp(seasons = TRUE)
```
- Use no spaces in file or folder names.
Use a dash (-) instead of a space.
- When making numbered (ordered) lists, just use `1. ` for all numbers.
[Quarto](https://quarto.org) will make them sequential automatically.
This makes it easier to add/reorder items, so you do not have to renumber manually each time there is a change.
- To update the list of `R` packages that are installed for running the blog post (`.qmd`) files, update the `DESCRIPTION` file.
- Before posting the article to the blog, make sure the article renders correctly locally by clicking the "Render" button in RStudio.

# Submitting Blog Articles {#sec-submitBlogArticles}

See the syllabus for instructions regarding submitting your blog article.
As noted in the syllabus, <u>**you are encouraged to submit your blog article well before the deadline**</u>.
You can expect to run into technical issues (e.g., errors when running your code, issues getting the blog post to compile, etc.).
And, it can take a long time for the blog to compile the first time, because it needs to install all of the necessary packages (it can also take a while for subsequent runs for which new versions of the packages are available and the packages need to be updated).
Thus, you should give yourself plenty of time to troubleshoot so that you can submit your blog article on time.
If you leave it for the last day, it is unlikely that you will be able to submit your blog article on time!
See the syllabus for suggestions on how to troubleshoot when issues arise.

# Data Files {#sec-dataFiles}

If you want to save a data file in the GitHub repository to be loaded and used in a post, you can save the data file in the same folder as the post.
Or, if you want to use the same data file in multiple posts, you can save the data files in the "data" folder that is in the root of the repository.

To load a data file in the same folder as the post, use the following `R` code (in a code chunk):

```{{r}}
#| eval: false

load("DATA_FILENAME.RData")
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

load("DATA_FILENAME.RData")
```

To load a data file in the root "data" folder, use the following `R` code (in a code chunk):

```{{r}}
#| eval: false

load("../../data/DATA_FILENAME.RData")
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

load("../../data/DATA_FILENAME.RData")
```

# Level-1 Heading {#sec-level1Heading}

Create a level-1 heading using the following syntax:

```
# Level-1 Heading {#sec-level1Heading}
```

## Level-2 Heading {#sec-level2Heading}

Create a level-2 heading using the following syntax:

```
## Level-2 Heading {#sec-level2Heading}
```

### Level-3 Heading {#sec-level3Heading}

Create a level-3 heading using the following syntax:

```
### Level-3 Heading {#sec-level3Heading}
```

#### Level-4 Heading {#sec-level4Heading}

Create a level-4 heading using the following syntax:

```
#### Level-4 Heading {#sec-level4Heading}
```

# Adding Code Options {#sec-addCodeOptions}

You can add options to executable code like this:

```{{r}}
#| echo: false

2 * 2
```

The resulting output (in the document) looks like this:

```{r}
#| echo: false

2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
Below is a code chunk that specifies `eval: false`, which allows providing code without executing the code:

```{{r}}
#| eval: false

2 * 2
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

2 * 2
```

Below is a code chunk that specifies `message: false` and `warning: false` to suppress messages and warnings:

```{{r}}
#| message: false
#| warning: false

library("petersenlab") #located here: https://github.com/DevPsyLab/petersenlab
```

The resulting output (in the document) looks like this:

```{r}
#| eval: false

library("petersenlab") #located here: https://github.com/DevPsyLab/petersenlab
```

# Plot {#sec-plot}

```{{r}}
plot(cars)
```

The resulting output (in the document) looks like this:

```{r}
plot(cars)
```

# Image {#sec-image}

To include an image, use the following syntax:

```
![](quarto-logo.png)
```

The resulting output (in the document) looks like this:

![](quarto-logo.png)

# Unordered Lists {#sec-unorderedLists}

To create unordered (bulleted) lists, use the following syntax:

```
- one item
- one item
- one item
    - one more item
    - one more item
    - one more item
```

The resulting output (in the document) looks like this:

- one item
- one item
- one item
    - one more item
    - one more item
    - one more item

# Ordered Lists {#sec-orderedLists}

To create ordered (numbered) lists, use the following syntax (make sure to use `1` for all numbers):

```
1. the first item
1. the second item
1. the third item
    - one unordered item
    - one unordered item
```

The resulting output (in the document) looks like this (note how the `1`s were automatically renumbered correctly):

1. the first item
1. the second item
1. the third item
    - one unordered item
    - one unordered item

# Troubleshooting {#sec-troubleshooting}

If you run into questions/issues/warnings/errors and need to troubleshoot, see the syllabus for suggestions on how to troubleshoot when issues arise.

Below are sections for common questions/issues/warnings/errors in [`R`](#sec-troubleshootingR), [`GitHub`](#sec-troubleshootingGitHub), and [`GitHub Pages`](#sec-troubleshootingGitHubPages) (that I will populate as I receive questions), and how to info on how to address them.

## `R` {#sec-troubleshootingR}

## `GitHub` {#sec-troubleshootingGitHub}

## `GitHub Pages` {#sec-troubleshootingGitHubPages}

# Session Info {#sec-sessionInfo}

```{r}
sessionInfo()
```